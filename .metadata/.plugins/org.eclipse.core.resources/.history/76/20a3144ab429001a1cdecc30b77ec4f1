package blockchain;

import java.security.Key;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.*;
import java.util.Base64;

public class ApplySha {
	
	public static String applySha256(String input)
	{
		MessageDigest digest = null;
		byte[] hash = null;
		
		try
		{
			digest = MessageDigest.getInstance("SHA-256");
			hash = digest.digest(input.getBytes("UTF-8"));
			StringBuffer hexString = new StringBuffer();
			for(int i = 0; i < hash.length; i++)
			{
				String hex = Integer.toHexString(0xff & hash[i]);
				if(hex.length() == 1)
					hexString.append('0');
				hexString.append(hex);
			}
			
			return hexString.toString();
		}
		
		catch(Exception e) {
			throw new RuntimeException(e);
		}
		
		
		
	}
	
	// Applies Elliptic curve Signature with Private Key & return result in byte array
	public static byte[] applyECDSASig(PrivateKey privateKey, String input)
	{
		Signature dsa;
		byte[] output = new byte[0];
		
		try {
			dsa = Signature.getInstance("EDCSA", "BC");
			dsa.initSign(privateKey);
			byte[] strByte = input.getBytes();
			dsa.update(strByte);
			byte[] realSig = dsa.sign();
			output = realSig;
		}catch(Exception e)
		{
			throw new RuntimeException(e);
		}
		
		return output;
		
	}
	
	
	// Verifying Signature with Public key
	public static Boolean verifyECDSASig(PublicKey publicKey, byte[] signature, String data)
	{
		try
		{
			Signature ecdsaVerify = Signature.getInstance("EDCSA", "BC");
			ecdsaVerify.initVerify(publicKey);
			ecdsaVerify.update(signature);
			return ecdsaVerify.verify(signature);		
			
		}catch(Exception e)
		{
			throw new RuntimeException(e);
		}
	}
	
	
	public static String getStringFromKey(Key key)
	{
		return Base64.getEncoder().encodeToString(key.getEncoded());
	}
	

}
