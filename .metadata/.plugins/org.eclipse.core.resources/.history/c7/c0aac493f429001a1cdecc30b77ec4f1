package blockchain;
import java.security.*;
import java.security.spec.ECGenParameterSpec;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Wallet {
	
	private PrivateKey privateKey;
	private PublicKey publicKey;
	
	public HashMap<String, TransactionOutput> UTXOs = new HashMap<String, TransactionOutput>();
	
	public Wallet()
	{
		generateKeyPair();
	}
	
	public void generateKeyPair()
	{
		try
		{
			KeyPairGenerator keyGen = KeyPairGenerator.getInstance("ECDSA", "BC");
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
			ECGenParameterSpec ecSpec = new ECGenParameterSpec("prime192v1");
			
			//Initialize key generator & generate key
			keyGen.initialize(ecSpec,random); //256 bytes
			KeyPair keyPair = keyGen.generateKeyPair();
			
			//Set public and private keys from KeyPair
			privateKey = keyPair.getPrivate();
			publicKey = keyPair.getPublic();
		
		}catch(Exception e)
		{
			throw new RuntimeException(e);
		}
	}
	
	public PublicKey getPublicKey()
	{
		return this.publicKey;
	}
	
	public PrivateKey getPrivateKey()
	{
		return this.privateKey;
	}
	
	public float getBalance()
	{
		float total = 0;
		for(Map.Entry<String, TransactionOutput> item: BlockchainMain.UTXOs.entrySet())
		{
			TransactionOutput UTXO = item.getValue();
			// Check if output is mine ie: coins belong to me
			if(UTXO.isMine(publicKey))
			{
				UTXOs.put(UTXO.id,UTXO); // Add to list of unspent Transactions
				total += UTXO.value;
			}
		}
		
		return total;
	}
	
	
	// Generates and returns new transaction from this wallet
	
	public Transaction sendFunds(PublicKey receiver, float value)
	{
		if(getBalance() < value)
		{
			System.out.println("# Not enough funds to complete transaction.");
			return null;
		}
		
		// Creating array list of inputs
		ArrayList<TransactionInput> inputs = new ArrayList<TransactionInput>();
		
		float total = 0;
		
		for(Map.Entry<String,TransactionOutput> item: UTXOs.entrySet())
		{
			TransactionOutput UTXO = item.getValue();
			total += UTXO.value;
			inputs.add(new TransactionInput(UTXO.id));
			if(total > value) break;
		}
		
		Transaction newTransaction = new Transaction(publicKey, receiver, value, inputs)
		newTransaction.generateSignature(privateKey);
		
		for(TransactionInput i: inputs)
		{
			UTXOs.remove(i.transactionOutputID);
		}
		return newTransaction;
	}
	
	
	
	

}
